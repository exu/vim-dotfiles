#!/usr/bin/env ruby

git_bundles = [
  #"git://github.com/astashov/vim-ruby-debugger.git",
  "git://github.com/mileszs/ack.vim",
  "git://github.com/ervandew/supertab.git",
  "git://github.com/godlygeek/tabular.git",
  #"git://github.com/hallison/vim-rdoc.git", #repo not exists!!
  # "git://github.com/msanders/snipmate.vim.git", replaced by ultisnips
  "git://github.com/SirVer/ultisnips.git",
  ["git://github.com/exu/vim-ultisnips-snippets.git", "ultisnips/snippets"],
  "git://github.com/pangloss/vim-javascript.git",
  "git://github.com/scrooloose/nerdtree.git",
  "git://github.com/scrooloose/syntastic.git",
  "git://github.com/timcharper/textile.vim.git",
  "git://github.com/tpope/vim-cucumber.git",
  "git://github.com/tpope/vim-fugitive.git",
  "git://github.com/tpope/vim-git.git",
  "git://github.com/tpope/vim-haml.git",
  "git://github.com/tpope/vim-markdown.git",
  "git://github.com/tpope/vim-rails.git",
  #"git://github.com/tpope/vim-repeat.git",
  "git://github.com/tpope/vim-surround.git",
  #"git://github.com/tpope/vim-vividchalk.git",
  #"git://github.com/tsaleh/taskpaper.vim.git",
  "git://github.com/tsaleh/vim-matchit.git",
  #"git://github.com/tsaleh/vim-shoulda.git",
  "git://github.com/tomtom/tcomment_vim.git",
  "git://github.com/vim-ruby/vim-ruby.git",
  "git://github.com/mattn/webapi-vim.git", #required by gist
  "git://github.com/mattn/gist-vim.git",
  # "git://github.com/vim-scripts/Gist.vim.git",
  "git://github.com/vim-scripts/vimwiki.git",
  "git://github.com/vim-scripts/bufexplorer.zip.git",
  "git://github.com/vim-scripts/mru.vim.git",
  "git://repo.or.cz/vcscommand",
  # "git://github.com/2072/PHP-Indenting-for-VIm.git",
  "git://github.com/mattn/zencoding-vim.git",
  "git://github.com/Raimondi/delimitMate.git",
  "git://github.com/Lokaltog/vim-powerline.git", #vim statusline
  # "git://github.com/kien/ctrlp.vim.git", # replaced by GPicker 
  "git://github.com/vim-scripts/dbext.vim.git",
  # "git://github.com/hsitz/VimOrganizer.git",
  "git://github.com/jceb/vim-orgmode.git",
  "git://github.com/vim-scripts/utl.vim.git",
  "git://github.com/exu/pgsql.vim.git",
  "git://github.com/exu/symfony_menu.vim.git",
  "git://github.com/exu/img2data.vim.git",
  "git://github.com/othree/html5.vim.git",
  "git://github.com/exu/PIV.git", # bug with syntax php
  "git://github.com/exu/vim-python_koans.git",
  "git://github.com/stephpy/vim-php-cs-fixer.git", # Code sniffer fixer integration
  # "git://github.com/spf13/PIV.git",
  # "git://github.com/StanAngeloff/php.vim.git",

  # "git://github.com/altercation/vim-colors-solarized.git",
  # "git://github.com/vim-scripts/Zenburn.git",
]


make_symlinks = {
#    "commandt" => "/home/exu/Workspace/poligon/vim/ct/Command-T/"
}

vim_org_scripts = [
  ["nginx", "14376", "syntax"]
  # ["mru", "521",  "plugin"],
]

git_raw_files = [
  { 
    "name" => "gpicker.vim", 
    "dir" => "gpicker/plugin",
    "uri" => "https://raw.github.com/alk/gpicker/master/gpicker.vim"
  },
]

require 'fileutils'
require 'open-uri'

bundles_dir = File.join(File.dirname(__FILE__), "bundle")
FileUtils.cd(bundles_dir)

if true  
  puts "trashing everything (lookout!)"
  Dir["*"].each {|d| FileUtils.rm_rf d }

  make_symlinks.each do |k,v| 
    FileUtils.ln_s v, k, :force => true
  end

  git_bundles.each do |url|
    if url.kind_of?(Array)
      dir = url[1]
      url = url[0]
      FileUtils.rm_rf(Dir.glob("#{dir}/*"))
    else 
      dir = url.split('/').last.sub(/\.git$/, '')
    end

    puts "unpacking #{url} into #{dir}"
    `git clone #{url} #{dir}`

    FileUtils.rm_rf(File.join(dir, ".git"))
  end


  vim_org_scripts.each do |name, script_id, script_type|
    puts "downloading #{name}"
    local_file = File.join(name, script_type, "#{name}.vim")
    FileUtils.mkdir_p(File.dirname(local_file))
    File.open(local_file, "w") do |file|
      file << open("http://www.vim.org/scripts/download_script.php?src_id=#{script_id}").read
    end
  end
end

git_raw_files.each do |v|
  puts "downloading #{v['name']} to #{v['dir']}"
  FileUtils.mkdir_p(v['dir'])
  local_file = File.join(v['dir'], v['name'])
  File.open(local_file, "w") do |file|
    file << open(v['uri']).read
  end
end

